import re
import time
import uuid
import random
import threading

from config import bot
from telebot import types
from datetime import datetime
import bot.keyboards.inline as mk
import bot.database.user_database as user_db
import bot.database.tournament_database as tr_db
import bot.utilities.tournament_helper as helper

bot.set_my_commands(commands=[types.BotCommand('/set', '–í–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É'),
                              types.BotCommand('/start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                              types.BotCommand('/launch', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä'),
                              types.BotCommand('/delete', '–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä')])


@bot.message_handler(commands=['start'])
def start_message(message):
    threading.Timer(1.0, lambda: bot.delete_message(message.chat.id, message.message_id)).start()
    if message.chat.type in ['group', 'supergroup']:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n'
                                          f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –≤–≤–µ–¥–∏ /table üèÜ\n\n'
                                          f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Ç–æ –æ—Ç–º–µ—Ç—å –º–µ–Ω—è, '
                                          f'–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É\n /set. üëÄ', reply_markup=mk.group_start_markup())
    else:
        if message.from_user.username:
            if ' ' in message.text:
                if not user_db.get_user_document_by_userid(message.chat.id):
                    user_db.insert_user(message.chat.id, message.from_user.username)
                args = message.text.split()[1]
                reg = tr_db.add_user_to_tournament(str(args), message.chat.id)

                if reg == 'no tour':
                    bot.send_message(message.chat.id, '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                elif reg == 'status':
                    bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–æ–Ω—á–∏–ª–∞—Å—å.\n'
                                                      '–ñ–¥–µ–º —Ç–µ–±—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ—Å—Ç—è–∑–∞–Ω–∏–∏.')
                elif reg == 'reg':
                    bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ.')
                elif reg == 'good':
                    bot.send_message(message.chat.id, '–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É.\n'
                                                      '–û–∂–∏–¥–∞–π –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.')
            else:
                if not user_db.get_user_document_by_userid(message.chat.id):
                    user_db.insert_user(message.chat.id, message.from_user.username)
                bot.send_message(message.chat.id, text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n'
                                                       '–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º? üèÜ', reply_markup=mk.start_markup())
        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ —é–∑–µ—Ä–Ω–µ–π–º.')


@bot.message_handler(content_types=['new_chat_members'])
def start_group(message):
    if message.new_chat_members[0].username == 'TournamentManagebot':
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n"
                                          "–Ø –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π.\n\n"
                                          "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä.",
                         reply_markup=mk.group_start_markup())


@bot.callback_query_handler(func=lambda call: call.data.startswith('user'))
def callback_query(call):
    if not user_db.check_tournaments(call.message.chat.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö!')


@bot.callback_query_handler(func=lambda call: call.data.startswith('tourtype'))
def callback_query(call):
    admins = bot.get_chat_administrators(call.message.chat.id)
    for admin in admins:
        if admin.user.id == call.from_user.id:
            tournament_id = tr_db.find_tournament_by_chat_id(call.message.chat.id)
            if tournament_id:
                bot.answer_callback_query(call.id, text='–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!')
            else:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞:', reply_markup=mk.tournament_type())


@bot.callback_query_handler(func=lambda call: call.data.startswith('newtour_'))
def callback_query(call):
    admins = bot.get_chat_administrators(call.message.chat.id)
    for admin in admins:
        if admin.user.id == call.from_user.id:
            tournament_type = call.data.split('_')[1]
            tournament_id = str(random.randint(100000, 999999))

            tr_db.insert_tournament(tournament_id, call.message.chat.id, bot.get_chat(call.message.chat.id).title,
                                    'register', tournament_type)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω.\n'
                                       '–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 30 —Å–µ–∫—É–Ω–¥.',
                                  reply_markup=mk.new_tournament(tournament_id))

            def starter_func(tournament_type):
                for i in range(300):
                    time.sleep(5)
                    if tr_db.get_tournament_status_by_id(tournament_id) == 'going':
                        break
                    else:
                        users = tr_db.get_tournament_users_by_id(tournament_id)
                        try:
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                  text=f'–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω.\n'
                                                       '–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 30 —Å–µ–∫—É–Ω–¥.\n\n'
                                                       f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: {", ".join(str(bot.get_chat_member(call.message.chat.id, x).user.first_name) for x in users)}',
                                                  reply_markup=mk.new_tournament(tournament_id))
                        except:
                            if not tr_db.get_tournament_users_by_id(tournament_id):
                                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text='–¢—É—Ä–Ω–∏—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω.')
                                return
                            else:
                                pass

                users = tr_db.get_tournament_users_by_id(tournament_id)
                user_db.update_users_with_current_tournament(call.message.chat.id, users)
                tr_db.update_tournament_status(tournament_id, 'going')

                if len(users) % 2 == 1:
                    tournament_type = 'free'
                    tr_db.update_tournament_schedule_type(tournament_id, tournament_type)

                if tournament_type == 'free':
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    bot.send_message(call.message.chat.id, '–¢—É—Ä–Ω–∏—Ä –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º!\n\n'
                                                           f'ü´Ç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {", ".join(str(bot.get_chat_member(call.message.chat.id, x).user.first_name) for x in users)}\n\n'
                                                           f'‚ùï –¢—É—Ä–Ω–∏—Ä –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, '
                                                           f'–∏–≥—Ä–∞–π—Ç–µ —Å –∫–µ–º —É–≥–æ–¥–Ω–æ –∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ.')

                else:
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    bot.send_message(call.message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞!\n'
                                                           '–§–æ—Ä–º–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä...\n\n'
                                                           f'ü´Ç –ù–∞ —Ç—É—Ä–Ω–∏—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {", ".join(str(bot.get_chat_member(call.message.chat.id, x).user.first_name) for x in users)}\n\n'
                                     )

                    games = helper.round_robin(tr_db.get_tournament_users_by_id(tournament_id))
                    tr_db.insert_schedule_to_tournament(games, tournament_id)

                    for item in games:
                        if isinstance(item, list):
                            new_item = []
                            for subitem in item:
                                if isinstance(subitem, tuple):
                                    new_subitem = (
                                        bot.get_chat_member(call.message.chat.id, subitem[0]).user.first_name,
                                        bot.get_chat_member(call.message.chat.id, subitem[1]).user.first_name)
                                    new_item.append(new_subitem)
                            item[:] = new_item

                    helper.generate_and_save_tables(games, tournament_id, bot.get_chat(call.message.chat.id).title)

                    bot.send_document(call.message.chat.id,
                                      document=open(f'bot/utilities/data/{tournament_id}.png', 'rb'),
                                      caption='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚òù\n\n'
                                              '–¢—É—Ä–Ω–∏—Ä –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º!\n'
                                              f'‚ùï –ò–≥—Ä—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º.')

            threading.Thread(target=starter_func(tournament_type)).start()


@bot.message_handler(commands=['launch'])
def launch_tournament(message):
    threading.Timer(1.0, lambda: bot.delete_message(message.chat.id, message.message_id)).start()
    if message.chat.type in ['group', 'supergroup']:
        admins = bot.get_chat_administrators(message.chat.id)
        for admin in admins:
            if admin.user.id == message.from_user.id:
                tournament_id = tr_db.find_tournament_by_chat_id(message.chat.id)
                if tournament_id:
                    tr_db.update_tournament_status(tournament_id, 'going')
                else:
                    bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.')
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.')


@bot.message_handler(commands=['delete'])
def launch_tournament(message):
    threading.Timer(1.0, lambda: bot.delete_message(message.chat.id, message.message_id)).start()
    if message.chat.type in ['group', 'supergroup']:
        admins = bot.get_chat_administrators(message.chat.id)
        for admin in admins:
            if admin.user.id == message.from_user.id:
                status = tr_db.find_tournament_by_chat_id(message.chat.id)
                if not status:
                    bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
                else:
                    users = tr_db.get_tournament_users_by_chat_id(message.chat.id)
                    user_db.update_users_with_current_tournament(False, users)
                    tr_db.delete_tournament_by_chat_id(message.chat.id)
                    bot.send_message(message.chat.id, '–¢–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω')
    else:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.')


@bot.message_handler(commands=['set'])
def set_message(message):
    threading.Timer(1.0, lambda: bot.delete_message(message.chat.id, message.message_id)).start()
    if ' ' in message.text:
        if len(message.text.split()) != 3:
            bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏ —Å—á–µ—Ç.')
        else:
            cmd, username, score = message.text.split()
            first_player = message.from_user.id
            second_player = user_db.get_user_document_by_username(username[1:])['userId']
            chat_id_1 = user_db.get_user_document_by_username(message.from_user.username)['current_chat']
            chat_id_2 = user_db.get_user_document_by_username(username[1:])['current_chat']

            if chat_id_1 != chat_id_2:
                bot.send_message(message.chat.id,
                                 '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º.')
            else:
                game = tr_db.find_game_by_users_and_chat(first_player, second_player, chat_id_1)
                if not game:
                    if not tr_db.get_tournament_users_by_chat_id(chat_id_1):
                        bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.')
                    else:
                        tourne = tr_db.get_tournament_type_by_chat_id(chat_id_1)
                        if tourne == 'free':
                            tr_db.add_new_game(chat_id_1, first_player, second_player)
                            game = tr_db.find_game_by_users_and_chat(first_player, second_player, chat_id_1)
                            game_id = game['game_id']
                            games_left = game['games_left']
                            if tr_db.insert_game_result(chat_id_1, game_id, score, games_left, first_player,
                                                        second_player):
                                bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –≤–Ω–µ—Å–µ–Ω–∞.\n\n'
                                                                  f'@{message.from_user.username} {score} {username}')
                        else:
                            bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.')
                else:
                    tourne = tr_db.get_tournament_type_by_chat_id(chat_id_1)
                    if tourne == 'free':
                        if game['games_left'] > 0:
                            game_id = game['game_id']
                            games_left = game['games_left']
                            if tr_db.insert_game_result(chat_id_1, game_id, score, games_left, first_player,
                                                        second_player):
                                bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –≤–Ω–µ—Å–µ–Ω–∞.\n\n'
                                                                  f'@{message.from_user.username} {score} {username}')
                        else:
                            bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–≤–µ –∏–≥—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
                    elif game['type'] == 'fix':
                        game_date_str = game['date']
                        game_date = datetime.strptime(game_date_str, '%d/%m/%y')
                        today_date = datetime.now()

                        if game_date.date() == today_date.date():
                            games_left = game['games_left']
                            if games_left > 0:
                                game_id = game['game_id']
                                if tr_db.insert_game_result(chat_id_1, game_id, score, games_left, first_player,
                                                            second_player):
                                    bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –≤–Ω–µ—Å–µ–Ω–∞.\n\n'
                                                                      f'@{message.from_user.username} {score} {username}')
                                else:
                                    bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞!')

                            else:
                                bot.send_message(message.chat.id, '–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–≤–µ –∏–≥—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
                        else:
                            bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º.')

    else:
        bot.send_message(message.chat.id, '‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n'
                                          '<code>/set [@–Ω–∏–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞] [—Å—á–µ—Ç (—Å–≤–æ–π:—Å–æ–ø–µ—Ä–Ω–∏–∫–∞)]</code>', parse_mode='html')


@bot.inline_handler(func=lambda query: len(query.query) > 0)
def query_text(query):
    result = None
    pattern = r"@\w+\s\d+:\d+"
    match = re.search(pattern, query.query)
    if match:
        username = query.query.split(' ')[0]
        score = query.query.split(' ')[1]

        author_id = query.from_user.id
        mentioned_id = user_db.get_user_document_by_username(username[1:])['userId']
        chat_id_a = user_db.get_user_document_by_username(query.from_user.username)['current_chat']
        chat_id_b = user_db.get_user_document_by_username(username[1:])['current_chat']

        if chat_id_b != chat_id_a:
            number = str(uuid.uuid4())
            title = '–û—à–∏–±–∫–∞!'
            description = '–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–º —Ç—É—Ä–Ω–∏—Ä–µ, –∏–ª–∏ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.'
            result = types.InlineQueryResultArticle(
                id=number,
                title=title,
                description=description,
                input_message_content=types.InputTextMessageContent(description)
            )
        else:
            game = tr_db.find_game_by_users_and_chat(author_id, mentioned_id, chat_id_a)
            if not game:
                if not tr_db.get_tournament_users_by_chat_id(chat_id_a):
                    number = str(uuid.uuid4())
                    title = '–û—à–∏–±–∫–∞'
                    description = '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.'
                    result = types.InlineQueryResultArticle(
                        id=number,
                        title=title,
                        description=description,
                        input_message_content=types.InputTextMessageContent(description)
                    )
                else:
                    tourne = tr_db.get_tournament_type_by_chat_id(chat_id_a)
                    if tourne == 'free':
                        number = str(uuid.uuid4())
                        title = '–í–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É'
                        description = f'@{query.from_user.username} {score} {username}'
                        command = f'/set {username} {score}'
                        result = types.InlineQueryResultArticle(
                            id=number,
                            title=title,
                            description=description,
                            input_message_content=types.InputTextMessageContent(command)
                        )
                    else:
                        number = str(uuid.uuid4())
                        title = '–û—à–∏–±–∫–∞'
                        description = '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.'
                        result = types.InlineQueryResultArticle(
                            id=number,
                            title=title,
                            description=description,
                            input_message_content=types.InputTextMessageContent(description)
                        )
            else:
                tourne = tr_db.get_tournament_type_by_chat_id(chat_id_a)
                if tourne == 'free':
                    if game['games_left'] > 0:
                        number = str(uuid.uuid4())
                        title = '–í–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É'
                        description = f'@{query.from_user.username} {score} {username}'
                        command = f'/set {username} {score}'
                        result = types.InlineQueryResultArticle(
                            id=number,
                            title=title,
                            description=description,
                            input_message_content=types.InputTextMessageContent(command)
                        )
                    else:
                        number = str(uuid.uuid4())
                        title = '–û—à–∏–±–∫–∞!'
                        description = '–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–≤–µ –∏–≥—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'

                        result = types.InlineQueryResultArticle(
                            id=number,
                            title=title,
                            description=description,
                            input_message_content=types.InputTextMessageContent(description)
                        )
                elif game['type'] == 'fix':
                    game_date_str = game['date']
                    game_date = datetime.strptime(game_date_str, '%d/%m/%y')
                    today_date = datetime.now()

                    if game_date.date() == today_date.date():
                        if game['games_left'] > 0:
                            number = str(uuid.uuid4())
                            title = '–í–Ω–µ—Å—Ç–∏ –∏–≥—Ä—É'
                            description = f'@{query.from_user.username} {score} {username}'
                            command = f'/set {username} {score}'
                            result = types.InlineQueryResultArticle(
                                id=number,
                                title=title,
                                description=description,
                                input_message_content=types.InputTextMessageContent(command)
                            )
                        else:
                            number = str(uuid.uuid4())
                            title = '–û—à–∏–±–∫–∞!'
                            description = '–í—ã —É–∂–µ –≤–Ω–µ—Å–ª–∏ –¥–≤–µ –∏–≥—Ä—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'

                            result = types.InlineQueryResultArticle(
                                id=number,
                                title=title,
                                description=description,
                                input_message_content=types.InputTextMessageContent(description)
                            )
                    else:
                        number = str(uuid.uuid4())
                        title = '–û—à–∏–±–∫–∞!'
                        description = '–°–µ–≥–æ–¥–Ω—è –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —Å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.'

                        result = types.InlineQueryResultArticle(
                            id=number,
                            title=title,
                            description=description,
                            input_message_content=types.InputTextMessageContent(description),
                        )

        bot.answer_inline_query(query.id, [result])
