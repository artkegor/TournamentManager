import random
import threading
import time

from telebot import types
from config import bot
import bot.keyboards.inline as mk
import bot.database.user_database as user_db
import bot.database.tournament_database as tr_db
import bot.utilities.tournament_helper as helper

bot.set_my_commands(commands=[types.BotCommand('/start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                              types.BotCommand('/help', '–ü–æ–º–æ—â—å'),
                              types.BotCommand('/launch', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä')])


@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    if message.chat.type in ['group', 'supergroup']:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n'
                                          f'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –≤–≤–µ–¥–∏ /table üèÜ\n\n'
                                          f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Ç–æ –æ—Ç–º–µ—Ç—å –º–µ–Ω—è, '
                                          f'–∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üëÄ', reply_markup=mk.group_start_markup())
    else:
        if ' ' in message.text:
            if not user_db.get_user_document_by_userid(message.chat.id):
                user_db.insert_user(message.chat.id, message.from_user.username)
            args = message.text.split()[1]
            reg = tr_db.add_user_to_tournament(str(args), message.chat.id)

            if reg == 'no tour':
                bot.send_message(message.chat.id, '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            elif reg == 'status':
                bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–æ–Ω—á–∏–ª–∞—Å—å.\n'
                                                  '–ñ–¥–µ–º —Ç–µ–±—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ—Å—Ç—è–∑–∞–Ω–∏–∏.')
            elif reg == 'reg':
                bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ.')
            elif reg == 'good':
                bot.send_message(message.chat.id, '–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É.\n'
                                                  '–û–∂–∏–¥–∞–π –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.')
        else:
            if not user_db.get_user_document_by_userid(message.chat.id):
                user_db.insert_user(message.chat.id, message.from_user.username)
            bot.send_message(message.chat.id, text='–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n'
                                                   '–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º? üèÜ', reply_markup=mk.start_markup())


@bot.message_handler(content_types=['new_chat_members'])
def start_group(message):
    if message.new_chat_members[0].username == 'TournamentManagebot':
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n"
                                          "–Ø –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π.\n\n"
                                          "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä.",
                         reply_markup=mk.group_start_markup())


@bot.callback_query_handler(func=lambda call: call.data.startswith('user'))
def callback_query(call):
    if not user_db.check_tournaments(call.message.chat.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö!')


@bot.callback_query_handler(func=lambda call: call.data.startswith('newtour'))
def callback_query(call):
    if call.message.chat.type in ['group', 'supergroup']:
        admins = bot.get_chat_administrators(call.message.chat.id)
        for admin in admins:
            if admin.user.id == call.from_user.id:
                tournament_id = str(random.randint(100000, 999999))
                tr_db.insert_tournament(tournament_id, call.message.chat.id, bot.get_chat(call.message.chat.id).title,
                                        'register')

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω.\n'
                                           '–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 30 —Å–µ–∫—É–Ω–¥.',
                                      reply_markup=mk.new_tournament(tournament_id))

                def starter_func():
                    for i in range(100):
                        time.sleep(4)
                        if tr_db.get_tournament_status_by_id(tournament_id) == 'going':
                            break
                        else:
                            users = tr_db.get_tournament_users_by_id(tournament_id)
                            try:
                                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                      text='–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω.\n'
                                                           '–î–æ –∫–æ–Ω—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 30 —Å–µ–∫—É–Ω–¥.\n\n'
                                                           f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: {", ".join(str(bot.get_chat_member(call.message.chat.id, x).user.first_name) for x in users)}',
                                                      reply_markup=mk.new_tournament(tournament_id))
                            except:
                                pass

                    tr_db.update_tournament_status(tournament_id, 'going')
                    print(tr_db.get_tournament_users_by_id(tournament_id))
                    games = helper.round_robin(tr_db.get_tournament_users_by_id(tournament_id))

                    # DELETE –∏ SEND
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å.\n'
                                               '–ê –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!\n\n'
                                               f'–ü–∞—Ä—ã: {games}')

                threading.Thread(target=starter_func()).start()
    else:
        pass


@bot.message_handler(commands=['launch'])
def launch_tournament(message):
    # –ú–ï–ù–Ø–ï–ú –ò –ë–û–¢ –°–ê–ú –°–ö–ê–ù–ò–†–£–ï–¢
    if message.chat.type in ['group', 'supergroup']:
        tournament_id = tr_db.find_tournament_by_chat_id(message.chat.id)
        if tournament_id:
            print(tr_db.get_tournament_users_by_id(tournament_id))
            games = helper.round_robin(tr_db.get_tournament_users_by_id(tournament_id))
            tr_db.update_tournament_status(tournament_id, 'going')
            bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å.\n'
                                              '–ê –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!\n\n'
                                              f'–ü–∞—Ä—ã: {games}')
        else:
            bot.send_message(message.chat.id, '–ù–∏–∫–∞–∫–æ–π —Ç—É—Ä–Ω–∏—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.')


@bot.message_handler(commands=['delete'])
def launch_tournament(message):
    tr_db.delete_tournament_by_chat_id(message.chat.id)
    bot.send_message(message.chat.id, '—É–¥–∞–ª–µ–Ω–æ')
